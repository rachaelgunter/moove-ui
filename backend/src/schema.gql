# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Organization {
  id: Float!
  name: String!
  GCSBucketName: String!
  GCPProjectName: String!
}

type User {
  sub: ID!
  email: String!
  picture: String
  name: String
  organization: String
  organizationObject: Organization
  GCSBucketName: String
  GCPProjectName: String
  roles: [String]
  createdAt: String
  lastLogin: String
}

type PaginatedUsers {
  nodes: [User!]
  totalCount: Int!
}

type BigQueryTable {
  datasetId: String!
  tableId: String!
}

type BigQueryDataset {
  projectId: String!
  datasetId: String!
  tables: [BigQueryTable]
}

type BigQueryProject {
  projectId: String!
  numericId: String!
  friendlyName: String!
  datasets: [BigQueryDataset]
}

type BigQueryTableDataCell {
  v: String!
}

type BigQueryTableDataRow {
  f: [BigQueryTableDataCell]
}

type BigQueryTableData {
  totalRows: String!
  rows: [BigQueryTableDataRow]
}

type BigQueryTableFieldSchema {
  name: String!
  type: String!
}

type BigQueryTableSchema {
  fields: [BigQueryTableFieldSchema]
}

type BigQueryTableInfo {
  schema: BigQueryTableSchema!
}

type BigQueryPreviewHeaders {
  name: String!
  type: String!
}

type BigQueryTableMetadata {
  totalRows: Float!
}

type BigQueryPreviewGroupedCell {
  id: String!
  cell: String
}

type BigQueryPreviewGroupedRow {
  id: String!
  row: [BigQueryPreviewGroupedCell]
}

type BigQueryPreviewGroupedRows {
  id: String!
  rows: [BigQueryPreviewGroupedRow]
}

type BigQueryPreviewTable {
  headers: [BigQueryPreviewHeaders]
  groupedRows: [BigQueryPreviewGroupedRows]
  rows: [[String]]
  tableMetadata: BigQueryTableMetadata
}

type BigQueryPreviewSegmentStatistics {
  name: String!
  value: String
}

type StreetViewCoordinates {
  latitude: Float!
  longitude: Float!
}

type PreviewSegment {
  rawData: String!
  statistics: [BigQueryPreviewSegmentStatistics]
  streetViewCoordinates: StreetViewCoordinates!
}

type BigQueryColumnTable {
  name: String!
  type: String!
  min: String!
  max: String!
  populated: Float!
  average: Float
  standardDeviation: Float
  sum: Float
  variance: Float
  count: Float
}

type ColumnVisualizations {
  id: String!
  analyticsVisualizations: [String!]!
  relationshipsVisualizations: [String!]!
}

type Dataset {
  analysisName: String!
  bigQueryDatasetName: String!
  description: String!
  totalRows: String!
  createdAt: String!
  status: String!
}

type RemovedDataset {
  analysisName: String!
}

type Query {
  getCurrentUser: User!
  users(offset: Int = 0, limit: Int = 5): PaginatedUsers!
  getUsersProjects: [BigQueryProject!]!
  tables(tablesParams: BigQueryTablesParams!): [BigQueryTable]
  tableData(offset: Int = 0, limit: Int = 5, projectId: String!, datasetId: String!, tableId: String!, selectedFields: [String]): BigQueryTableData!
  tableInfo(projectId: String!, datasetId: String!, tableId: String!): BigQueryTableInfo!
  previewTable(offset: Int = 0, limit: Int = 5, projectId: String!, datasetId: String!, tableId: String!, selectedFields: [String]): BigQueryPreviewTable!
  columnsTable(offset: Int = 0, limit: Int = 5, projectId: String!, datasetId: String!, tableId: String!, selectedFields: [String]): [BigQueryColumnTable]
  previewSegment(segmentId: String!): PreviewSegment!
  getDatasets(GCPProjectName: String!): [Dataset]
  datasetColumnVisualizations(bucketName: String!, analysisName: String!, columnName: String!, organizationName: String!): ColumnVisualizations!
  datasetFileSignedUploadUrl(fileName: String!, organizationName: String!, analysisName: String!): String!
  organizations: [Organization!]!
}

input BigQueryTablesParams {
  projectId: String!
  datasetId: String!
}

type Mutation {
  syncUserData(signedInUser: UserInput!): User!
  createUser(createUserPayload: CreateUserPayload!): User!
  createDataset(datasetParams: DatasetParamsInput!): String!
  createLocalFileDataset(datasetParams: FileDatasetParamsInput!): String!
  deleteDataset(analysisName: String!): RemovedDataset
}

input UserInput {
  sub: String!
  email: String!
  picture: String!
  name: String!
}

input CreateUserPayload {
  name: String!
  email: String!
  role: String!
  organizationId: Float
}

input DatasetParamsInput {
  name: String!
  description: String!
  projectId: String!
  datasetId: String!
  tableId: String!
  organizationName: String!
  analysisProject: String!
  assetsBucket: String!
}

input FileDatasetParamsInput {
  name: String!
  fileName: String!
  description: String!
  organizationName: String!
  analysisProject: String!
  assetsBucket: String!
}
